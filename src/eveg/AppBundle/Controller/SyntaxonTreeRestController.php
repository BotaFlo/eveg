<?php
// src/eveg/AppBundle/Controller/SyntaxonTreeRestController.php

namespace eveg\AppBundle\Controller;

use FOS\RestBundle\Controller\Annotations\View;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use FOS\RestBundle\Controller\FOSRestController;
use JMS\Serializer\SerializationContext;
use Symfony\Component\HttpFoundation\Session\Session;

// routes are automaticly generated by FOSRestBundle using the name of a function
// ex : public function getTestAction will set up an 'api_get_test' route

// How to use Groups (JMSSerializer) with FosRestBundle : http://stackoverflow.com/questions/21413143/how-to-get-groups-working-for-jmsserializerbundle-and-fosrestbundle

class SyntaxonTreeRestController extends FOSRestController
{
  public function getSyntaxonsTreeAction()
  {

    $view = $this->view();
    $view->setSerializationContext(SerializationContext::create()->setGroups(array('baseTree')));

    // Get the department filter
    $session = new Session();
    $depFrFilter = $session->get('depFrFilterArray');
    $activeDepFrFilter = false;
    foreach ($depFrFilter as $key => $value) {
        if($value != null) $activeDepFrFilter = true;
    }
    if($activeDepFrFilter == false) $depFrFilter = null;
        
    $syntaxonTree = $this->getDoctrine()
    					 ->getManager()
    					 ->getRepository('evegAppBundle:SyntaxonCore')
    					 ->getBaseTree($depFrFilter);

    if(empty($syntaxonTree)){
      throw $this->createNotFoundException();
    }

    // Grabbing catCode service
    $catCode = $this->get('eveg_app.catCode');

    foreach ($syntaxonTree as $key => $syntaxon) {

        if ($catCode->getDirectChild($syntaxon->getCatminatCode()) == null) {
            $syntaxon->setFolder(false);
            $syntaxon->setLazy(false);
        } else {
            $syntaxon->setFolder(true);
            $syntaxon->setLazy(true);
        }

    }

    $view->setData($syntaxonTree);
    return $view;
    
  }

    public function getSyntaxonNodeAction($id)
    {
        
        $view = $this->view();
        $view->setSerializationContext(SerializationContext::create()->setGroups(array('nodeTree')));

        // Get the department filter
        $session = new Session();
        $depFrFilter = $session->get('depFrFilterArray');
        $activeDepFrFilter = false;
        foreach ($depFrFilter as $key => $value) {
            if($value != null) $activeDepFrFilter = true;
        }
        if($activeDepFrFilter == false) $depFrFilter = null;

        // Grabbing catCode service
        $catCode = $this->get('eveg_app.catCode');

        $syntaxon = $this->getDoctrine()
                        ->getManager()
                        ->getRepository('evegAppBundle:SyntaxonCore')
                        ->findOneById($id);

        //
        $nextLevel = $catCode->getNextLevel($syntaxon->getLevel(), 1);
        $syntaxonTree = $this->getDoctrine()
                         ->getManager()
                         ->getRepository('evegAppBundle:SyntaxonCore')
                         ->getNextTreeNode($id, $nextLevel, $depFrFilter);

        if(empty($syntaxonTree)){
            $nextLevel = $catCode->getNextLevel($syntaxon->getLevel(), 2);
            $syntaxonTree = $this->getDoctrine()
                             ->getManager()
                             ->getRepository('evegAppBundle:SyntaxonCore')
                             ->getNextTreeNode($id, $nextLevel, $depFrFilter);
        }

        if(empty($syntaxonTree)){
          throw $this->createNotFoundException();
        }

        foreach ($syntaxonTree as $key => $syntaxon) {

            if ($catCode->getDirectChild($syntaxon->getCatminatCode()) == null) {
                $syntaxon->setFolder(false);
                $syntaxon->setLazy(false);
            } else {
                $syntaxon->setFolder(true);
                $syntaxon->setLazy(true);
            }

        }

    $view->setData($syntaxonTree);
    return $view;

    }
}